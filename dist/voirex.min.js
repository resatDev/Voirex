(function(factory){typeof define==='function'&&define.amd?define(factory):factory()}(function(){'use strict';function howMuchAccuracy(accuracy){var acc=accuracy.split('');return Number(acc.splice(0,acc.length-1).join(''))}
const isEmpty=(recognitionText)=>{if(recognitionText!=''){return recognitionText}else{return"-1"}};function getVoiceApiInfo(voiceApiType){let browserDefaultVoiceApi=`
            /*/*/*/*/*/*/*/*/*/*/*/*/*/*/*/*/*/*/*/*/*/*/*/*
            /*/*/*/DEFAULT BROWSER VOICE RECOGNITION/*/*/*/*
            /*/*/*/*/*/*/*/*/*/*/*/*/*/*/*/*/*/*/*/*/*/*/*/*

           "Interim Results": mutable (default false) \n\n
           "Maximum" Alternatives: mutable (default 1) \n\n
           "Lang" : mutable (default meta charset) \n\n
           
           { 
            "Afrikaans": [
              ["South Africa", "af-ZA"]
            ],
            "Arabic" : [
              ["Algeria","ar-DZ"],
              ["Bahrain","ar-BH"],
              ["Egypt","ar-EG"],
              ["Israel","ar-IL"],
              ["Iraq","ar-IQ"],
              ["Jordan","ar-JO"],
              ["Kuwait","ar-KW"],
              ["Lebanon","ar-LB"],
              ["Morocco","ar-MA"],
              ["Oman","ar-OM"],
              ["Palestinian Territory","ar-PS"],
              ["Qatar","ar-QA"],
              ["Saudi Arabia","ar-SA"],
              ["Tunisia","ar-TN"],
              ["UAE","ar-AE"]
            ],
            "Basque": [
              ["Spain", "eu-ES"]
            ],
            "Bulgarian": [
              ["Bulgaria", "bg-BG"]
            ],
            "Catalan": [
              ["Spain", "ca-ES"]
            ],
            "Chinese Mandarin": [
              ["China (Simp.)", "cmn-Hans-CN"],
              ["Hong Kong SAR (Trad.)", "cmn-Hans-HK"],
              ["Taiwan (Trad.)", "cmn-Hant-TW"]
            ],
            "Chinese Cantonese": [
              ["Hong Kong", "yue-Hant-HK"]
            ],
            "Croatian": [
              ["Croatia", "hr_HR"]
            ],
            "Czech": [
              ["Czech Republic", "cs-CZ"]
            ],
            "Danish": [
              ["Denmark", "da-DK"]
            ],
            "English": [
              ["Australia", "en-AU"],
              ["Canada", "en-CA"],
              ["India", "en-IN"],
              ["Ireland", "en-IE"],
              ["New Zealand", "en-NZ"],
              ["Philippines", "en-PH"],
              ["South Africa", "en-ZA"],
              ["United Kingdom", "en-GB"],
              ["United States", "en-US"]
            ],
            "Farsi": [
              ["Iran", "fa-IR"]
            ],
            "French": [
              ["France", "fr-FR"]
            ],
            "Filipino": [
              ["Philippines", "fil-PH"]
            ],
            "Galician": [
              ["Spain", "gl-ES"]
            ],
            "German": [
              ["Germany", "de-DE"]
            ],
            "Greek": [
              ["Greece", "el-GR"]
            ],
            "Finnish": [
              ["Finland", "fi-FI"]
            ],
            "Hebrew" :[
              ["Israel", "he-IL"]
            ],
            "Hindi": [
              ["India", "hi-IN"]
            ],
            "Hungarian": [
              ["Hungary", "hu-HU"]
            ],
            "Indonesian": [
              ["Indonesia", "id-ID"]
            ],
            "Icelandic": [
              ["Iceland", "is-IS"]
            ],
            "Italian": [
              ["Italy", "it-IT"],
              ["Switzerland", "it-CH"]
            ],
            "Japanese": [
              ["Japan", "ja-JP"]
            ],
            "Korean": [
              ["Korea", "ko-KR"]
            ],
            "Lithuanian": [
              ["Lithuania", "lt-LT"]
            ],
            "Malaysian": [
              ["Malaysia", "ms-MY"]
            ],
            "Dutch": [
              ["Netherlands", "nl-NL"]
            ],
            "Norwegian": [
              ["Norway", "nb-NO"]
            ],
            "Polish": [
              ["Poland", "pl-PL"]
            ],
            "Portuguese": [
              ["Brazil", "pt-BR"],
              ["Portugal", "pt-PT"]
            ],
            "Romanian": [
              ["Romania", "ro-RO"]
            ],
            "Russian": [
              ["Russia", "ru-RU"]
            ],
            "Serbian": [
              ["Serbia", "sr-RS"]
            ],
            "Slovak": [
              ["Slovakia", "sk-SK"]
            ],
            "Slovenian": [
              ["Slovenia", "sl-SI"]
            ],
            "Spanish": [
              ["Argentina", "es-AR"],
              ["Bolivia", "es-BO"],
              ["Chile", "es-CL"],
              ["Colombia", "es-CO"],
              ["Costa Rica", "es-CR"],
              ["Dominican Republic", "es-DO"],
              ["Ecuador", "es-EC"],
              ["El Salvador", "es-SV"],
              ["Guatemala", "es-GT"],
              ["Honduras", "es-HN"],
              ["México", "es-MX"],
              ["Nicaragua", "es-NI"],
              ["Panamá", "es-PA"],
              ["Paraguay", "es-PY"],
              ["Perú", "es-PE"],
              ["Puerto Rico", "es-PR"],
              ["Spain", "es-ES"],
              ["Uruguay", "es-UY"],
              ["United States", "es-US"],
              ["Venezuela", "es-VE"]
            ],
            "Swedish": [
              ["Sweden", "sv-SE"]
            ],
            "Thai": [
              ["Thailand", "th-TH"]
            ],
            "Turkish": [
              ["Turkey", "tr-TR"]
            ],
            "Ukrainian": [
              ["Ukraine", "uk-UA"]
            ],
            "Vietnamese": [
              ["Viet Nam", "vi-VN"]
            ],
            "Zulu": [
              ["South Africa", "zu-ZA"]
            ]
          }`;switch(voiceApiType){case 'browserDefault':return browserDefaultVoiceApi;default:return"-1"}}
function setVoiceRecognition(lang){if('webkitSpeechRecognition' in window){window.SpeechRecognition=window.webkitSpeechRecognition||window.SpeechRecognition;let recognition=new window.SpeechRecognition();recognition.lang=lang;recognition.interimResults=!1;recognition.maxAlternatives=400;console.log('This browser supported by voirex');return recognition}
else{console.log("This browser does not support Voirex \n Supported browsers; \n --> Google Chrome \n --> Google Chromium");return(-1)}}
function startRecord(recognition){recognition.start()}
function stopRecord(recognition){recognition.stop()}
function instruction(event){let finalTranscript='';for(let i=event.resultIndex,len=event.results.length;i<len;i++){let transcript=event.results[i][0].transcript;if(event.results[i].isFinal){finalTranscript+=transcript}}
return finalTranscript}
function existingVoiceApi(existingApi){return existingApi=="-1"?!1:!0}
function levenshtein(keyword,voiceText){if(!keyword||!voiceText)return(keyword||voiceText).length;var matrix=[];for(var i=0;i<=voiceText.length;i++){matrix[i]=[i];if(i===0)continue;for(var j=0;j<=keyword.length;j++){matrix[0][j]=j;if(j===0)continue;matrix[i][j]=voiceText.charAt(i-1)==keyword.charAt(j-1)?matrix[i-1][j-1]:Math.min(matrix[i-1][j-1]+1,matrix[i][j-1]+1,matrix[i-1][j]+1)}}
return(1-matrix[voiceText.length][keyword.length]/Math.max(voiceText.length,keyword.length))*100}
function actualAccuracy(distanceAl,keyword,voiceText){let percantageAcc={};for(let i=0;i<keyword.length;i++){percantageAcc[keyword[i]]=distanceAl(keyword[i],voiceText).toString()}
JSON.stringify(percantageAcc);return percantageAcc}
function maxAccuracy(accuracyList){var values=[];Object.keys(accuracyList).every((prop)=>values.push(Number(accuracyList[prop])));return Math.max(...values)}
function minAccuracy(accuracyList){var values=[];Object.keys(accuracyList).every((prop)=>values.push(Number(accuracyList[prop])));return Math.min(...values)}
function resultProcessingVR(accuracyAct,accuracyDev,func){return accuracyAct>=accuracyDev?func():-1}
class Voirex{constructor(voiceType={type:'',lang:''},command={keyword:[],func:'',accuracy:'',pref:''})
{this.voiceType=voiceType;this.command=command;this.howMuchAccuracy=howMuchAccuracy;this.isEmpty=isEmpty;this.getVoiceApiInfo=getVoiceApiInfo;this.existingVoiceApi=existingVoiceApi;this.levenshtein=levenshtein;this.actualAccuracy=actualAccuracy;this.maxAccuracy=maxAccuracy;this.minAccuracy=minAccuracy;this.resultProcessVR=resultProcessingVR;this.setVoiceRecognition=setVoiceRecognition;this.startRecord=startRecord;this.stopRecord=stopRecord;this.instruction=instruction}
getAPIInfo(){return getVoiceApiInfo(this.voiceType.type)}
developerAccuracyNum(){return howMuchAccuracy(this.command.accuracy)}
checkingVoiceText(){return isEmpty(voiceText)}
checkingVoiceApi(){return this.existingVoiceApi(this.getVoiceApiInfo(this.voiceType.type))}
checkActualAccuracy(voiceText){return actualAccuracy(this.levenshtein,this.command.keyword,voiceText)}
checkMax(voiceText){return maxAccuracy(this.checkActualAccuracy(voiceText))}
checkMin(voiceText){return minAccuracy(this.checkActualAccuracy(voiceText))}
setVoiceRecConfig(){return setVoiceRecognition(this.voiceType.lang)}
startRecognition(recognition){startRecord(recognition)}
stopRecognition(recognition){stopRecord(recognition)}
getVoiceText(e){return this.instruction(e)}
devPref(voiceText){switch(this.command.pref){case 'max':return this.checkMax(voiceText);case 'min':return this.checkMin(voiceText)}}
resultProcessVoiceRecog(voiceText){return this.resultProcessVR(this.devPref(voiceText),this.developerAccuracyNum(),this.command.func)}}
function myfunc(){alert('It is successfully working!')}
var recognition=new Voirex({type:'browserDefault',lang:'tr-TR'},{keyword:['merhaba','selam'],func:myfunc,accuracy:'2%',pref:'max'});var new_recogntion=recognition.setVoiceRecConfig();recognition.startRecognition(new_recogntion);new_recogntion.onresult=(event)=>{console.log(recognition.resultProcessVoiceRecog(recognition.getVoiceText(event)))}}))